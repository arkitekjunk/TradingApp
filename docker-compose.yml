version: '3.8'

services:
  trading-app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8080:8000"
    environment:
      - HOST=0.0.0.0
      - PORT=8000
    env_file:
      - .env
    volumes:
      # Persist data and logs
      - ./data:/app/data
      - ./logs:/app/logs
      # Development: mount source for live reload (comment out for production)
      # - ./app:/app/app
      # - ./settings.yaml:/app/settings.yaml
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/healthz', timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    # Resource limits (adjust based on your needs)
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # Optional: Redis for caching (uncomment if needed)
  # redis:
  #   image: redis:7-alpine
  #   ports:
  #     - "6379:6379"
  #   volumes:
  #     - redis_data:/data
  #   restart: unless-stopped

  # Optional: PostgreSQL for production database (uncomment if needed)
  # postgres:
  #   image: postgres:15-alpine
  #   environment:
  #     POSTGRES_DB: trading
  #     POSTGRES_USER: trading
  #     POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-trading123}
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data
  #   ports:
  #     - "5432:5432"
  #   restart: unless-stopped

  # Optional: Grafana for monitoring (uncomment if needed)
  # grafana:
  #   image: grafana/grafana:latest
  #   ports:
  #     - "3000:3000"
  #   environment:
  #     - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
  #   volumes:
  #     - grafana_data:/var/lib/grafana
  #   restart: unless-stopped

volumes:
  # Uncomment if using optional services
  # redis_data:
  # postgres_data:
  # grafana_data: